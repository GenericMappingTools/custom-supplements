/* $Id$
 *
 * Copyright (c) 2016-2018 by pwessel
 * See LICENSE.TXT file for copying and redistribution conditions.
 */

/* gmt_custom_module.c populates the local array g_custom_module
 * with parameters such as name, group, purpose and keys strings.
 * This file also contains the following convenience functions to
 * display all module purposes or just list their names:
 *
 *   void gmt_custom_module_show_all (void *API);
 *   void gmt_custom_module_list_all (void *API);
 *
 * These functions may be called by gmt --help and gmt --show-modules
 *
 * DO NOT edit this file directly! Regenerate the file by running
 *	 gmt_make_custom_code.sh
 */

#include "gmt.h"
#include "gmt_custom_module.h"
#include <string.h>

#ifndef gmt_M_unused
#define gmt_M_unused(x) (void)(x)
#endif

/* Sorted array with information for all custom modules */

/* name, library, and purpose for each module */
struct Gmt_moduleinfo {
	const char *name;             /* Program name */
	const char *component;        /* Component (core, supplement, custom) */
	const char *purpose;          /* Program purpose */
	const char *keys;             /* Program option info for external APIs */
};

static struct Gmt_moduleinfo g_custom_module[] = {
	{"gmtaverage", "custom", "Block average (x,y,z) data tables by mean, median, or mode estimation", "<DI,>DO,RG-"},
	{"gmtmercmap", "custom", "Make a Mercator color map from ETOPO 1, 2, or 5 arc min global relief grids", "CCi,>XO,RG-"},
	{"gmtparser", "custom", "Demonstrate parsing of input data, defaults, and options", ""},
	{"grdfourier", "custom", "Create a grid, add a spike, filter it in frequency domain, and write output", "<GI,GGO,RG-"},
	{NULL, NULL, NULL, NULL} /* last element == NULL detects end of array */
};

/* Pretty print all GMT custom module names and their purposes for gmt --help */
void gmt_custom_module_show_all (void *V_API) {
	unsigned int module_id = 0;
	char message[256] = {""};
	GMT_Message (V_API, GMT_TIME_NONE, "\n=== " "GMT custom: Tools for the custom project" " ===\n");
	while (g_custom_module[module_id].name != NULL) {
		if (module_id == 0 || strcmp (g_custom_module[module_id-1].component, g_custom_module[module_id].component)) {
			/* Start of new supplemental group */
			sprintf (message, "\nModule name:     Purpose of %s module:\n", g_custom_module[module_id].component);
			GMT_Message (V_API, GMT_TIME_NONE, message);
			GMT_Message (V_API, GMT_TIME_NONE, "----------------------------------------------------------------\n");
		}
	sprintf (message, "%-16s %s\n",
		g_custom_module[module_id].name, g_custom_module[module_id].purpose);
		GMT_Message (V_API, GMT_TIME_NONE, message);
		++module_id;
	}
}

/* Produce single list on stdout of all GMT custom module names for gmt --show-modules */
void gmt_custom_module_list_all (void *API) {
	unsigned int module_id = 0;
	gmt_M_unused(API);
	while (g_custom_module[module_id].name != NULL) {
		printf ("%s\n", g_custom_module[module_id].name);
		++module_id;
	}
}

/* Lookup module id by name, return option keys pointer (for external API developers) */
const char *gmt_custom_module_keys (void *API, char *candidate) {
	int module_id = 0;
	gmt_M_unused(API);

	/* Match actual_name against g_module[module_id].name */
	while (g_custom_module[module_id].name != NULL &&
	       strcmp (candidate, g_custom_module[module_id].name))
		++module_id;

	/* Return Module keys or NULL */
	return (g_custom_module[module_id].keys);
}

/* Lookup module id by name, return group char name (for external API developers) */
const char *gmt_custom_module_group (void *API, char *candidate) {
	int module_id = 0;
	gmt_M_unused(API);

	/* Match actual_name against g_module[module_id].name */
	while (g_custom_module[module_id].name != NULL &&
	       strcmp (candidate, g_custom_module[module_id].name))
		++module_id;

	/* Return Module keys or NULL */
	return (g_custom_module[module_id].component);
}
